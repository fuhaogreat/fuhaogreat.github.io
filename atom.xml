<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fuhaogreat.github.io</id>
    <title>Gridea</title>
    <updated>2021-04-18T10:55:21.310Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://fuhaogreat.github.io"/>
    <link rel="self" href="https://fuhaogreat.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://fuhaogreat.github.io/images/avatar.png</logo>
    <icon>https://fuhaogreat.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[matplotlib、numpy]]></title>
        <id>https://fuhaogreat.github.io/post/day2/</id>
        <link href="https://fuhaogreat.github.io/post/day2/">
        </link>
        <updated>2021-04-17T13:40:38.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>matplotlib 相关常用技术
<ol>
<li>在图像中添加辅助信息</li>
<li>绘制多个图像</li>
<li>绘制常用的图像</li>
</ol>
</li>
<li>numpy 相关常用技术
<ol>
<li>numpy 数组常用属性</li>
<li>numpy 基本操作
<ol>
<li>数组的创建</li>
<li>numpy 数组索引和切片</li>
<li>数组的形状修改</li>
<li>数组类型的修改</li>
<li>数组的去重</li>
</ol>
</li>
<li>numpy 数组一些运算
<ol>
<li>数组和整数</li>
<li>同维数组运算</li>
<li>不同维度数组的运算</li>
</ol>
</li>
<li>矩阵的相关运算
<ol>
<li>矩阵运算（矩阵和数字、矩阵和矩阵）</li>
<li>矩阵相乘</li>
<li>矩阵转置</li>
<li>逆矩阵</li>
<li>矩阵计算函数</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>补充：1. 路径中不要出现中文、不要出现空格。2. 必须要显示文件扩展名。</p>
<h1 id="1-绘制温度变化折线图">1. 绘制温度变化折线图</h1>
<ol>
<li>
<p>回顾绘图的步骤</p>
<pre><code class="language-python">import matplotlib.pyplot as plt 

plt.figure(figsize=(20, 8), dpi=80)
plt.plot(x, y)
plt.show()
</code></pre>
</li>
<li>
<p>示例代码：</p>
<pre><code class="language-python">import matplotlib.pyplot as plt
import random

# 画出温度变化图

# 0.准备x, y坐标的数据
x = range(60)
y_shanghai = [random.uniform(15, 18) for i in x]

# 1.创建画布
plt.figure(figsize=(20, 8), dpi=80)

# 2.绘制折线图
plt.plot(x, y_shanghai)

# 3.显示图像
plt.show()
</code></pre>
</li>
</ol>
<h1 id="2-绘图辅助完善">2. 绘图辅助完善</h1>
<ol>
<li>
<p>刻度显示</p>
<ol>
<li>plt.xticks(刻度值, 标签值)、plt.yticks(刻度值, 标签值)</li>
</ol>
</li>
<li>
<p>中文设置问题</p>
<ol>
<li>
<p>windows : 用户目录，显示所有文件，看到 .matplotlib 目录。目录一般会有字体缓存文件， xxxx.json。（删掉）用 txt 创建 matplotlibrc 文件，写上下面的内容：</p>
<pre><code class="language-python">font.family         : sans-serif
font.sans-serif         : SimHei
axes.unicode_minus  : False
</code></pre>
</li>
<li>
<p>Mac ： 也是一样。matplotlibrc 没有扩展名。</p>
</li>
</ol>
</li>
<li>
<p>设置网格：plt.grid 函数</p>
</li>
<li>
<p>设置标题：plt.title(&quot;&quot;, pad=20)</p>
</li>
<li>
<p>设置轴标签：plt.xlabel(&quot;&quot;)、plt.ylabel(&quot;&quot;)</p>
</li>
<li>
<p>图像保存：plt.savefig(&quot;路径&quot;)</p>
</li>
<li>
<p>示例代码：</p>
</li>
</ol>
<pre><code class="language-python">import matplotlib.pyplot as plt
import random


x = range(60)
y_shanghai = [random.uniform(15, 18) for i in x]
plt.figure(figsize=(20, 8), dpi=80)
plt.plot(x, y_shanghai)


# 1. 设置标签
plt.xlabel(&quot;时间&quot;)
plt.ylabel(&quot;温度&quot;)
plt.title(&quot;中午11点0分到12点之间的温度变化图示&quot;, fontsize=20)

# 2. 设置刻度
x_ticks_label = [&quot;11点{}分&quot;.format(i) for i in x]
# 构造y轴刻度
y_ticks = range(40)

# 修改x,y轴坐标的刻度显示
plt.xticks(x[::5], x_ticks_label[::5])
plt.yticks(y_ticks[::5])

# 3. 设置网格
plt.grid(True, linestyle='--', alpha=0.5)

# 4. 保存图片到指定路径
plt.savefig(&quot;test.png&quot;)

plt.show()
</code></pre>
<h1 id="3-在一个坐标系下绘制多个图像">3. 在一个坐标系下绘制多个图像</h1>
<ol>
<li>绘制多个图像：多次调用绘图函数。</li>
<li>设置图例：每个图像一定要设置 label 属性，图例才会显示。</li>
</ol>
<p>示例代码：</p>
<pre><code class="language-python"># 0.准备数据
x = range(60)
y_shanghai = [random.uniform(15, 18) for i in x]
y_beijing = [random.uniform(1,3) for i in x]

# 1.创建画布
plt.figure(figsize=(20, 8), dpi=100)

# 2.绘制图像
plt.plot(x, y_shanghai, label=&quot;上海&quot;)
plt.plot(x, y_beijing, color=&quot;r&quot;, linestyle=&quot;--&quot;, label=&quot;北京&quot;)

# 2.1 添加x,y轴刻度
# 构造x,y轴刻度标签
x_ticks_label = [&quot;11点{}分&quot;.format(i) for i in x]
y_ticks = range(40)

# 刻度显示
plt.xticks(x[::5], x_ticks_label[::5])
plt.yticks(y_ticks[::5])

# 2.2 添加网格显示
plt.grid(True, linestyle=&quot;--&quot;, alpha=0.5)

# 2.3 添加描述信息
plt.xlabel(&quot;时间&quot;)
plt.ylabel(&quot;温度&quot;)
plt.title(&quot;中午11点--12点某城市温度变化图&quot;, fontsize=20)

# 2.4 图像保存
plt.savefig(&quot;./test.png&quot;)

# 2.5 添加图例
plt.legend(loc=0)


# 3.图像显示
plt.show()
</code></pre>
<h1 id="4-在多个坐标系下绘制图像">4. 在多个坐标系下绘制图像</h1>
<ol>
<li>绘制多个子图：plt.subpolts(nrows=, ncols=, figsize=(), dpi=0)</li>
<li>绘制 sin 函数图像</li>
</ol>
<pre><code class="language-python"># 0.准备数据
x = range(60)
y_shanghai = [random.uniform(15, 18) for i in x]
y_beijing = [random.uniform(1, 5) for i in x]

# 1.创建画布
# plt.figure(figsize=(20, 8), dpi=100)
fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(20, 8), dpi=100)


# 2.绘制图像
# plt.plot(x, y_shanghai, label=&quot;上海&quot;)
# plt.plot(x, y_beijing, color=&quot;r&quot;, linestyle=&quot;--&quot;, label=&quot;北京&quot;)
axes[0].plot(x, y_shanghai, label=&quot;上海&quot;)
axes[1].plot(x, y_beijing, color=&quot;r&quot;, linestyle=&quot;--&quot;, label=&quot;北京&quot;)

# 2.1 添加x,y轴刻度
# 构造x,y轴刻度标签
x_ticks_label = [&quot;11点{}分&quot;.format(i) for i in x]
y_ticks = range(40)

# 刻度显示
# plt.xticks(x[::5], x_ticks_label[::5])
# plt.yticks(y_ticks[::5])
axes[0].set_xticks(x[::5])
axes[0].set_yticks(y_ticks[::5])
axes[0].set_xticklabels(x_ticks_label[::5])
axes[1].set_xticks(x[::5])
axes[1].set_yticks(y_ticks[::5])
axes[1].set_xticklabels(x_ticks_label[::5])

# 2.2 添加网格显示
# plt.grid(True, linestyle=&quot;--&quot;, alpha=0.5)
axes[0].grid(True, linestyle=&quot;--&quot;, alpha=0.5)
axes[1].grid(True, linestyle=&quot;--&quot;, alpha=0.5)

# 2.3 添加描述信息
# plt.xlabel(&quot;时间&quot;)
# plt.ylabel(&quot;温度&quot;)
# plt.title(&quot;中午11点--12点某城市温度变化图&quot;, fontsize=20)
axes[0].set_xlabel(&quot;时间&quot;)
axes[0].set_ylabel(&quot;温度&quot;)
axes[0].set_title(&quot;中午11点--12点某城市温度变化图&quot;, fontsize=20)
axes[1].set_xlabel(&quot;时间&quot;)
axes[1].set_ylabel(&quot;温度&quot;)
axes[1].set_title(&quot;中午11点--12点某城市温度变化图&quot;, fontsize=20)

# # 2.4 图像保存
plt.savefig(&quot;./test.png&quot;)

# # 2.5 添加图例
# plt.legend(loc=0)
axes[0].legend(loc=0)
axes[1].legend(loc=0)


# 3.图像显示
plt.show()
</code></pre>
<h1 id="5-绘制坐标系">5. 绘制坐标系</h1>
<ol>
<li>如何绘制坐标系</li>
</ol>
<pre><code class="language-python">import matplotlib.pyplot as plt


plt.figure(figsize=(20, 8), dpi=80)


# 1. 获得坐标轴对象
axes = plt.gca()  # get current axes

# 2. 把上面、右面的边框去掉
axes.spines[&quot;right&quot;].set_color(&quot;none&quot;)
axes.spines[&quot;top&quot;].set_color(&quot;none&quot;)

# 3. 把左边向右移动到中间位置

# 设置轴的表示的值范围
plt.xlim(-10, 10)
plt.ylim(-10, 10)


# 4. 把下面的向上移动到中间位置
# 把左边的轴放在 x 值为0的位置
axes.spines[&quot;left&quot;].set_position((&quot;data&quot;, 0))
axes.spines[&quot;bottom&quot;].set_position((&quot;data&quot;, 0))

# 添加网格
plt.grid(alpha=0.5)

# 设置标题
plt.title(&quot;坐标系&quot;, pad=20, fontsize=18)

# 绘制折现
plt.plot([-5, 5], [-5, 5], label=&quot;一条直线&quot;)

# 显示图例
plt.legend()


# 轴标签
# plt.xlabel(&quot;X轴&quot;)
# plt.ylabel(&quot;Y轴&quot;, fontsize=20)

# 前两个是位置（坐标系的值），
plt.text(1, 1, &quot;X轴&quot;, fontsize=20)
plt.text(-1, 5, &quot;Y轴&quot;, fontsize=20)



plt.show()
</code></pre>
<h1 id="6-常见图形绘制">6. 常见图形绘制</h1>
<ol>
<li>散点图：plt.scatter，<strong>判断变量之间是否存在数量关联趋势,展示离群点(分布规律)</strong></li>
<li>柱状图：plt.bar，<strong>绘制连离散的数据,能够一眼看出各个数据的大小,比较数据之间的差别。(统计/对比)</strong></li>
<li>饼状图：plt.pie，<strong>绘制连续性的数据展示一组或者多组数据的分布状况(统计)</strong></li>
<li>直方图： plt.hist，<strong>分类数据的占比情况(占比)</strong></li>
</ol>
<pre><code class="language-python"># 0.准备数据
x = [225.98, 247.07, 253.14, 457.85, 241.58, 301.01,  20.67, 288.64,
       163.56, 120.06, 207.83, 342.75, 147.9 ,  53.06, 224.72,  29.51,
        21.61, 483.21, 245.25, 399.25, 343.35]
y = [196.63, 203.88, 210.75, 372.74, 202.41, 247.61,  24.9 , 239.34,
       140.32, 104.15, 176.84, 288.23, 128.79,  49.64, 191.74,  33.1 ,
        30.74, 400.02, 205.35, 330.64, 283.45]

# 1.创建画布
plt.figure(figsize=(20, 8), dpi=100)

# 2.绘制散点图
plt.scatter(x, y)

# 3.显示图像
plt.show()
</code></pre>
<pre><code class="language-python"># 0.准备数据
# 电影名字
movie_name = ['雷神3：诸神黄昏','正义联盟','东方快车谋杀案','寻梦环游记','全球风暴','降魔传','追捕','七十七天','密战','狂兽','其它']
# 横坐标
x = range(len(movie_name))
# 票房数据
y = [73853,57767,22354,15969,14839,8725,8716,8318,7916,6764,52222]

# 1.创建画布
plt.figure(figsize=(20, 8), dpi=100)

# 2.绘制柱状图
plt.bar(x, y, width=0.5, color=['b','r','g','y','c','m','y','k','c','g','b'])

# 2.1b修改x轴的刻度显示
plt.xticks(x, movie_name)

# 2.2 添加网格显示
plt.grid(linestyle=&quot;--&quot;, alpha=0.5)

# 2.3 添加标题
plt.title(&quot;电影票房收入对比&quot;)

# 3.显示图像
plt.show()
</code></pre>
<p>函数：</p>
<p>grid、title、xlabel、ylabel、figure、xlim、ylim、legend、plot、subplots、xticks、yticks、save、show、set_xtick、set_ytick、set_xticklabels、set_yticklabels、gca、text、scatter、bar、pie、hist.....</p>
<h1 id="7-numpy-介绍">7. numpy 介绍</h1>
<ol>
<li>numpy 是做什么的？计算，大数据计算，效率很高。</li>
<li>numpy 为什么效率高？
<ol>
<li>释放 GIL ：如果我们的Python解释器要执行多任务，就必须开启多个线程，去执行不同的Python代码。</li>
<li>C语言实现</li>
<li>并行计算</li>
<li>内存结构</li>
</ol>
</li>
<li>numpy 和 Python list 的区别？
<ol>
<li>Python list 是一个异构（不同类型的数据）的容器</li>
<li>numpy 数组中的元素必须都是同一类型的。</li>
</ol>
</li>
</ol>
<h1 id="8-ndarray-介绍">8. ndarray 介绍</h1>
<ol>
<li>ndarray 有哪些属性含义？</li>
</ol>
<table>
<thead>
<tr>
<th>ndarray.shape</th>
<th>数组维度的元组</th>
</tr>
</thead>
<tbody>
<tr>
<td>ndarray.ndim</td>
<td>数组维数</td>
</tr>
<tr>
<td>ndarray.size</td>
<td>数组中的元素数量</td>
</tr>
<tr>
<td>ndarray.itemsize</td>
<td>一个数组元素的长度（字节）</td>
</tr>
<tr>
<td>ndarray.dtype</td>
<td>数组元素的类型</td>
</tr>
</tbody>
</table>
<ol start="2">
<li>ndarray 支持哪些数据类型？</li>
</ol>
<pre><code class="language-python">&gt;&gt;&gt; a = np.array([[1, 2, 3],[4, 5, 6]], dtype=np.float32)
&gt;&gt;&gt; a.dtype
dtype('float32')

&gt;&gt;&gt; arr = np.array(['python', 'tensorflow', 'scikit-learn', 'numpy'], dtype = np.string_)
&gt;&gt;&gt; arr
array([b'python', b'tensorflow', b'scikit-learn', b'numpy'], dtype='|S12')

</code></pre>
<h1 id="9-创建-0-1-数组">9. 创建 0、1 数组</h1>
<ol>
<li>
<p>创建 0、1 数组</p>
<ol>
<li>np.ones 创建全是1的数组、np.ones_like根据其他数组的形状创建全是1的数组</li>
<li>np.zeros、np.zeros_like</li>
</ol>
</li>
<li>
<p>从现有数组创建新的数组（深拷贝和浅拷贝）</p>
<ol>
<li>
<p>深拷贝：np.array()</p>
</li>
<li>
<p>浅拷贝：np.asarray()</p>
<pre><code class="language-python">a = np.array([[1,2,3],[4,5,6]])
# 从现有的数组当中创建
a1 = np.array(a)
# 相当于索引的形式，并没有真正的创建一个新的
a2 = np.asarray(a)
</code></pre>
</li>
</ol>
</li>
<li>
<p>生成固定范围的数组</p>
<ol>
<li>
<p>np.linspace  生成的是等差数列。</p>
<pre><code class="language-python"># 生成等间隔的数组
np.linspace(0, 100, 11)
# 输出结果
array([  0.,  10.,  20.,  30.,  40.,  50.,  60.,  70.,  80.,  90., 100.])
</code></pre>
</li>
<li>
<p>np.arange 生成的是等步长的数列。</p>
<pre><code class="language-python">np.arange(10, 50, 2)
# 输出结果
array([10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42,
       44, 46, 48])
</code></pre>
</li>
<li>
<p>np.logspace 生成的是等比数列</p>
<pre><code class="language-python">np.logspace(0, 2, 3)
# 输出结果
array([  1.,  10., 100.])
</code></pre>
</li>
</ol>
</li>
</ol>
<h1 id="10-生成随机数组">10. 生成随机数组</h1>
<ol>
<li>生成符合正态分布的数组
<ol>
<li>np.random.randn()  满足标准正态分布</li>
<li>np.random.normal(均值，标准差)</li>
<li>np.random.standard_normal 满足标准正态分布</li>
<li>均值为0、标准差为1</li>
</ol>
</li>
<li>生成均匀分布的数组
<ol>
<li>np.random.rand</li>
<li>np.random.uniform</li>
<li>np.random.randint</li>
</ol>
</li>
</ol>
<p>这几个函数就是创建数组。</p>
<h1 id="11-数组的基本操作">11. 数组的基本操作</h1>
<ol>
<li>数组的索引、切片【重点】</li>
<li>数组的形状修改: reshape 返回一个新的形状、resize 修改原数组的形状。</li>
<li>数组的类型修改</li>
<li>数组去重：np.unique</li>
</ol>
<p>Tobytes() 函数可以将 Numpy 数组对象转换为字节数据，用于存储到文件中，叫做序列化。从文件恢复对象叫做反序列化。</p>
<h1 id="12-ndarray-运算">12. ndarray 运算</h1>
<ol>
<li>数组的逻辑运算</li>
<li>通用函数判断</li>
<li>统计函数</li>
</ol>
<h1 id="13-数组间运算">13. 数组间运算</h1>
<ol>
<li>数组和数之间的运算</li>
<li>相同维度数组之间的运算</li>
<li>不同维度数组之间的广播机制运算</li>
</ol>
<h1 id="14-矩阵">14. 矩阵</h1>
<ol>
<li>矩阵运算（矩阵和数字、矩阵和矩阵）</li>
<li>矩阵相乘</li>
<li>矩阵转置</li>
<li>逆矩阵</li>
<li>矩阵计算函数</li>
</ol>
]]></content>
    </entry>
</feed>